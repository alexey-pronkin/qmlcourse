name: deploy-branch

on:
  workflow_dispatch:

jobs:
  deploy-branch:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            label: linux-64
            prefix: /usr/share/miniconda3/envs/qml-dev

          # - os: macos-latest
          #   label: osx-64
          #   prefix: /Users/runner/miniconda3/envs/qml-dev

          # - os: windows-latest
          #   label: win-64
          #   prefix: C:\Miniconda3\envs\qml-dev
    timeout-minutes: 15

    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: get branch name
        uses: nelonoel/branch-name@v1.0.1

      - name: check locking files
        uses: tj-actions/verify-changed-files@v5.5
        id: changed_files
        with:
          files: |
            poetry.lock
            pyproject.toml

      - name: create or change environment-yml and requirements-*.ymls
        if: steps.changed_files.outputs.files_changed == 'true'
        uses: ./.github/workflows/create-requirements.yml

        # If files is changed
      - name: Pull new requirements file if environment is changed
        if: steps.changed_files.outputs.files_changed == 'true'
        run: git pull && cp ./tools/requirements/requirements-linux.yml environment.yml

        # Else - use from checkout
      - name: copy requirements-linux.yml to environment.yml
        if: steps.changed_files.outputs.files_changed == 'false'
        run: cp ./tools/requirements/requirements-linux.yml environment.yml

      # Use cache
      - uses: actions/cache@v2
        with:
          path: ${{ matrix.prefix }}
          key: ${{ matrix.label }}-conda-${{ hashFiles('environment.yml') }}
        id: mamba-cache

      - name: install mamba
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: qml-dev
          use-mamba: true
          python-version: 3.9
          environment-file: environment.yml
          channel-priority: true
          use-only-tar-bz2: true

      # - name: copy cache dir for dependecies
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cache-poetry-modules
      #   with:
      #     path: .venv
      #     key: venv2-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      # # Update environment if cache does not exist
      # - name: Update environment
      #   run: mamba env update -n qml-dev -f environment.yml
      #   if: steps.cache.outputs.cache-hit != 'true'

      # remove qml-dev env and create the new one from file if we miss the cache
      - name: missing cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mamba env remove --name qml-dev
          mamba create --name qml-dev -f environment.yml

      # - name: install mamba with all packages if we miss the cache
      #   uses: conda-incubator/setup-miniconda@v2

      #   with:
      #     miniforge-variant: Mambaforge
      #     miniforge-version: latest
      #     activate-environment: qml-dev
      #     use-mamba: true
      #     python-version: 3.8
      #     channels: psi4/label/dev, conda-forge, defaults
      #     channel-priority: true
      #     use-only-tar-bz2: true
      #     environment-file: environment.yml

      #       - name: add SSH key-file
      #         run: |
      #           mkdir -p /home/runner/.ssh
      #           echo "${{ secrets.AWS_SSH_KEY }}" > /home/runner/.ssh/key.pem
      #           chmod 600 /home/runner/.ssh/key.pem

      - name: build the book
        run: |
          # export DWAVE_TOKEN="${{ secrets.DWAVE_TOKEN }}"
          conda run -n qml-dev jupyter-book build ./qmlcourseRU
        shell: bash
#       - name: deploy
#         run: |
#           export CURRENT_BRANCH="${BRANCH_NAME}"

#           export AWS_HOST="54.89.156.216"
#           export AWS_USER="ubuntu"
#           export SSH_KEY="/home/runner/.ssh/key.pem"
#
#           conda run -n qml-dev python ./tools/deploy2aws.py ./
